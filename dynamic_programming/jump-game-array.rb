class Solution
    # @param a : array of integers
    # @return an integer
    def canJump(a)
        max_length = a.length - 1
        return 1 if max_length == 0
        max_reach = a[0]
        i = 0
        while(i <= max_reach)
            return 1 if max_reach >= max_length
            max_reach = i + a[i] if (i + a[i]) > max_reach
            i += 1
        end
        return 0
    end
end

A = [ 8, 4, 0, 0, 0, 0, 0, 0, 20, 17, 0, 7, 0, 0, 6, 0, 0, 0, 0, 1, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 28, 0, 0, 0, 26, 0, 0, 16, 6, 0, 0, 27, 11, 0, 0, 0, 0, 23, 0, 0, 0, 10, 0, 0, 1, 24, 1, 0, 0, 0, 0, 17, 0, 2, 0, 9, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 17, 0, 9, 0, 23, 13, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 26, 29, 0, 1, 25, 17, 3, 0, 0, 5, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 1, 0, 7, 0, 10, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 17, 0, 20, 22, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 12, 5, 0, 0, 0, 0, 15, 0, 29, 0, 7, 23, 0, 0, 0, 0, 0, 0, 11, 21, 5, 0, 0, 0, 0, 18, 14, 0, 0, 0, 0, 23, 11, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 20, 12, 28, 1, 0, 0, 0, 0, 0, 0, 0, 0, 30, 1, 0, 0, 0, 0, 0, 2, 12, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 6, 0, 0, 0, 0, 0, 26, 23, 0, 0, 0, 11, 20, 0, 0, 16, 24, 0, 0, 0, 0, 13, 4, 0, 0, 6, 0, 28, 0, 17, 0, 0, 5, 0, 0, 0, 0, 0, 0, 20, 0, 1, 0, 30, 0, 0, 0, 2, 0, 0, 11, 0, 0, 26, 22, 0, 0, 0, 0, 0, 0, 0, 22, 1, 0, 0, 18, 10, 0, 1, 0, 0, 0, 9, 0, 0, 28, 0, 0, 0, 0, 0, 23, 3, 0, 0, 29, 0, 0, 0, 8, 0, 0, 25, 0, 0, 28, 0, 0, 0, 0, 9, 15, 0, 0, 9, 0, 28, 26, 0, 0, 0, 0, 23, 0, 0, 0, 28, 0, 0, 17, 0, 1, 0, 4, 0, 0, 16, 0, 0, 0, 0, 0, 0, 5, 0, 23, 0, 0, 0, 0, 27, 0, 14, 0, 14, 16, 0, 0, 0, 0, 0, 30, 0, 26, 0, 13, 0, 2, 0, 0, 19, 0, 0, 0, 0, 25, 0, 2, 0, 0, 20, 0, 0, 5, 16, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 8, 0, 0, 0, 0, 0, 18, 0, 0, 0, 18, 8, 0, 0, 23, 0, 0, 0, 0, 11, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 27, 0, 0, 0, 8, 10, 26, 15, 8, 0, 27, 18, 0, 0, 21, 26, 1, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 26, 17, 0, 0, 25, 0, 0, 30, 0, 23, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0 ]

Solution.new.canJump(A)